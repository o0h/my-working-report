<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on まいにち書くぞ</title>
    <link>/posts/</link>
    <description>Recent content in Posts on まいにち書くぞ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 06 Dec 2018 08:24:24 +0900</lastBuildDate>
    
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018/12/06</title>
      <link>/posts/20181206/</link>
      <pubDate>Thu, 06 Dec 2018 08:24:24 +0900</pubDate>
      
      <guid>/posts/20181206/</guid>
      <description>

&lt;h3 id=&#34;よもやま&#34;&gt;よもやま&lt;/h3&gt;

&lt;h4 id=&#34;reactのやつ&#34;&gt;Reactのやつ&lt;/h4&gt;

&lt;p&gt;隣のエンジニアにReact.Suspense/React.lazyの話を聞いた。機能的には「むしろ今までなかったのか〜」って思う部分だけど、今の時代だと「明らかに超簡単に描画の遅延処理ができるぜ！！」みたいなのが実現できそうで、すっげぇ。&lt;/p&gt;

&lt;h4 id=&#34;style-fix&#34;&gt;style fix&lt;/h4&gt;

&lt;p&gt;PHPの自動整形ツール、php-cs-fixterがちょっと気になっていて触ってみた。phpcbfよりも、ちょっと強めに動ける感じかな？&lt;br /&gt;
フロントエンドのコーディングに関してprettierを使ってみると、体験として「すごく良い意味で縛られる」という感じがあったの、もしあれをPHPでもできたら？とは思う。ただ、もしphpcsの既存ルールとぶつかっていったら地獄や・・・という恐怖もあって、使っていない感じ。&lt;/p&gt;

&lt;p&gt;このあたり、もし望めるなら「自分で拡張できる柔軟性」なのだ。検出ルールと整形ルールを書けたら・・・？と。ということで、DSLっぽい記法やAPI自体の学習コストがゼロになるとは期待していないが、「最初に頑張ったらガンガン好きにできる！」みたいなことになれば、すっごく良さそうだ・・・・！ってことで、興味の対象に。&lt;/p&gt;

&lt;p&gt;関連して。&lt;br /&gt;
&lt;a href=&#34;https://github.com/laravel/laravel/pull/4496&#34;&gt;Add PHPCS config file by skyrpex · Pull Request #4496 · laravel/laravel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Laravelって、phpcsのルールセットをおいてないのか・・・驚いた。&lt;/p&gt;

&lt;h3 id=&#34;気になった記事-読んだ記事など&#34;&gt;気になった記事・読んだ記事など&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/natsuyoshi_jr/items/23acf2466942af4ab8c0&#34;&gt;[PHP]安定したシステム運用を目指して取り組んだこと - Qiita&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;なるほど。原則として「速さより見易さ」で良いと思うんだけど、このくらいなら意識して良さそう。mergeしたいときしかarray_merge使わないし、普段からappend/pushしたいならそういう表現をとっているはずだけど。&lt;/li&gt;
&lt;li&gt;とはいえ、配列の結合($ar1 + $ar2)だったり、array_pushと$ar[] = $aだったり、似たような書き方多くて、明確に「こっちの書き方でないとアカン！！」っていうこともない場合、どっちにしたものかは悩ましいぞPHP！！って思う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#react-166-shipped-the-one-with-suspense-for-code-splitting&#34;&gt;React 16.x Roadmap – React Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;便利ツール-ショートカット&#34;&gt;便利ツール・ショートカット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sebastianbergmann/phpcpd&#34;&gt;sebastianbergmann/phpcpd: Copy/Paste Detector (CPD) for PHP code.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;公開したもの&#34;&gt;公開したもの&lt;/h3&gt;

&lt;h3 id=&#34;ひとこと&#34;&gt;ひとこと&lt;/h3&gt;

&lt;p&gt;今朝は少し早めに活動を開始できたのだけど、昨夜の夕飯を抜いたから！な気がする。毎日そうすればいいんだろうな・・・&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018/12/05</title>
      <link>/posts/20181205/</link>
      <pubDate>Wed, 05 Dec 2018 00:39:46 +0900</pubDate>
      
      <guid>/posts/20181205/</guid>
      <description>

&lt;h3 id=&#34;よもやま&#34;&gt;よもやま&lt;/h3&gt;

&lt;h4 id=&#34;cakeなやつ&#34;&gt;cakeなやつ&lt;/h4&gt;

&lt;p&gt;Cakeの &lt;code&gt;Query&lt;/code&gt; 、1回やったあとは結果がキャッシュされる。(当たり前っちゃあ、まぁ・・そうだよね〜という感じ)。&lt;code&gt;Query::$_results&lt;/code&gt; の中に値があるか？を、 &lt;code&gt;all()&lt;/code&gt; の最初の方でチェックしに行くのねーって思った。resultsをインスタンス内に保持するのとcacheって別なのか。&lt;/p&gt;

&lt;h4 id=&#34;dockerなやつ&#34;&gt;dockerなやつ&lt;/h4&gt;

&lt;p&gt;夜(AM)にDockerというかphp7-alpineを触っていて、何か思ってたんと違う〜〜っていう場面があり。理解が浅い。&lt;br /&gt;
docer-php-ext-install、apk add php7-hogehoge、apk add php-hogehoge、pecl install hogehoge・・・と。「CakeのAppはmod_php上で動くのだけど、composer installするとext不足で怒られる」という場面が多々。それさえできちゃえば、恐らく手元でちゃんと動かせるようになるのかな・・・・？というくらいの温度感。&lt;/p&gt;

&lt;p&gt;あと、今まで適当にゼロからのphpアプリケーションを作る！という時にはphp-alpine-fpmイメージを使ったことがあったものの。今回は会社の既存アプリケーションを試してみながら手を実際に動かしてみよう！であり、そのため「割とちゃんと使ってみよう」という目的。そうして行く中で、 &lt;code&gt;apk add --virtual&lt;/code&gt; とか &lt;code&gt;apk add --no-cache&lt;/code&gt; とか、なるほど確かにこれはめっちゃ軽量なイメージが作れそうだ・・・！と興奮していた。今までは、「元々のイメージサイズが小さい」とか「必要最低限のパッケージに絞り込んである」とか、それだけのイメージだった。小さい・速いは正義だと思うので、これはちゃんと使えるようにしたいな〜&lt;/p&gt;

&lt;h3 id=&#34;気になった記事-読んだ記事など&#34;&gt;気になった記事・読んだ記事など&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.alpinelinux.org/wiki/Setting_Up_Apache_with_PHP&#34;&gt;Setting Up Apache with PHP - Alpine Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.matchingood.com/entry/2017/03/09/202011&#34;&gt;php7-session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://unskilled.site/docker%E3%81%AE%E5%85%AC%E5%BC%8Fphp%E3%81%AEdockerfile%E3%82%92%E9%A0%91%E5%BC%B5%E3%81%A3%E3%81%A6%E8%AA%AD%E3%82%93%E3%81%A7%E7%90%86%E8%A7%A3%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6/&#34;&gt;Dockerの公式PHPのDockerfileを頑張って読んで理解しようとしてみた | Unskilled?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rainorshine.asia/2018/05/07/post2951.html&#34;&gt;Alpineベースの公式PHPイメージにImagickをインストールする&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--virtual&lt;/code&gt;とか&lt;code&gt;build-dependencies&lt;/code&gt; ってそういうことか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/nmatayoshi/items/e7f34e1e220264131934&#34;&gt;dockerのphp:7-fpm-alpineイメージでCakePHP3を動かす - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;便利ツール-ショートカット&#34;&gt;便利ツール・ショートカット&lt;/h3&gt;

&lt;h3 id=&#34;公開したもの&#34;&gt;公開したもの&lt;/h3&gt;

&lt;h3 id=&#34;ひとこと&#34;&gt;ひとこと&lt;/h3&gt;

&lt;p&gt;相変わらず〜だけど、まだCakeの割と基本的だったりチュートリアルに載っているような内容でも知らなかったり挙動を掴んでいないものが、チラホラあるなぁ。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018/12/04</title>
      <link>/posts/20181204/</link>
      <pubDate>Tue, 04 Dec 2018 19:43:17 +0900</pubDate>
      
      <guid>/posts/20181204/</guid>
      <description>

&lt;p&gt;この投稿はテストです。&lt;br /&gt;
&lt;a href=&#34;http://daisuki.nichiyoubi.land/entry/2018/12/04/183259&#34;&gt;http://daisuki.nichiyoubi.land/entry/2018/12/04/183259&lt;/a&gt; という記事を書きました、コレはこのサイトの構築時メモです。&lt;br /&gt;
隣の席のエンジニアにインスパイアされてやりました。&lt;/p&gt;

&lt;p&gt;元ネタ: &lt;a href=&#34;https://www.sarasoueidan.com/desk/just-write/&#34;&gt;Just write. — Sara Soueidan – Freelance-Front-End UI/UX Developer&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;気になった記事-読んだ記事など&#34;&gt;気になった記事・読んだ記事など&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atmarkit.co.jp/ait/articles/1507/21/news017.html&#34;&gt;Visual Studio CodeでGitを利用する (&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;)：特集：Visual Studio Code早分かりガイド - ＠IT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/n0bisuke/items/4701481c3bca4df81b0b&#34;&gt;Hugoで新規記事を作成するときのTips的なメモ - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://oyasu.github.io/2018/02/hugo_vscode/&#34;&gt;VSCodeとHugoでブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image&#34;&gt;Paste Image - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://biz.connehito.com/entry/2018/12/04/112859&#34;&gt;OKR推進を支える「わくわく感」と「いけそう感」について話すよ - コネヒトのタレ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;便利ツール-ショートカット&#34;&gt;便利ツール・ショートカット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flaviocopes.com/vscode/#the-command-palette&#34;&gt;THE COMMAND PALETTE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;vscode / &lt;code&gt;cmd + opt + p&lt;/code&gt; Paste Imageのクリップボード貼り付け&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;公開したもの&#34;&gt;公開したもの&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://daisuki.nichiyoubi.land/entry/2018/12/04/183259&#34;&gt;「Hugoでgithub-pages使ってカスタムドメインなブログを構築する」を0から - 大好き！にちようび&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ひとこと&#34;&gt;ひとこと&lt;/h3&gt;

&lt;p&gt;とりあえず、「Hugoで毎日メモを作っていこう！」と決めた日。&lt;br /&gt;
Terminal VIM / Visual Studio Codeがメインエディタになるのかな〜というイメージ。画像を使うなら後者か。&lt;br /&gt;
ひとまず「まぁVS Codeの方が汎用性高いかな？」ということで、 「ターミナルからコンテンツ作成&amp;amp;&amp;amp;エディタ起動」みたいなfunciton定義して.zhsrcに入れておいた。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>